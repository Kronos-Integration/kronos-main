#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const githubChangeRemoteFile = require('github-change-remote-file'),
  commander = require('commander'),
  keychain = require('keychain');


commander
  .option('-k, --keystore [account/service]', 'keystore')
  .option('-r, --repo [user/repo]', 'repo')
  .parse(process.argv);

const keystore = {
  account: "arlac77",
  service: 'github_token'
};

if (commander.keystore) {
  const v = commander.keystore.split(/\//);
  keystore.account = v[0];
  keystore.service = v[1];
}

let user = 'Kronos-Integration';
let repo = 'kronos-adapter-outbound-http';

if (commander.repo) {
  const v = commander.repo.split(/\//);
  user = v[0];
  repo = v[1];
}

/*
keychain.setPassword({
  account: account,
  service: service,
  password: 'xxxxxx'
}, function (err, pass) {
  if (err) {
    console.log(`${err}`);
    return;
  }
  console.log('password set');
});
*/

keychain.getPassword(keystore, (err, pass) => {
  if (err) {
    console.log(`${err}`);
    return;
  }
  work(pass);
});


function work(token) {
  githubChangeRemoteFile({
    user: user,
    repo: repo,
    filename: 'package.json',
    transform: pkg => {
      pkg = JSON.parse(pkg);

      pkg.repository = {
        "type": "git",
        "url": `git+https://github.com/${user}/${repo}.git`
      };
      pkg.bugs = {
        "url": `https://github.com/${user}/${repo}/issues`
      };
      pkg.homepage = `https://github.com/${user}/${repo}#readme`;

      if (pkg.version === '0.0.0') {
        pkg.version = '0.0.0-semantic-release';
      }

      if (pkg.release && pkg.release.debug === false) {
        delete pkg.release;
      }

      Object.assign(pkg.devDependencies, {
        'semantic-release': '6.2.0',
        'chai': '3.5.0',
        'mocha': '2.4.5',
        'jsdoc': '3.4.0',
        'istanbul': '0.4.2',
        'cz-conventional-changelog': '1.1.5'
      });

      Object.assign(pkg.scripts, {
        'semantic-release': "semantic-release pre && npm publish && semantic-release post",
        'doc': "jsdoc lib/*.js",
        'test': "mocha tests/*_test.js",
        'cover': "node ./node_modules/istanbul/lib/cli.js cover --hook-run-in-context ./node_modules/mocha/bin/_mocha -- --R spec --U exports tests/*_test.js"
      });

      pkg.engines = {
        node: ">=5"
      };

      pkg.license = "BSD-2-Clause";

      if (pkg.keywords === undefined) {
        pkg.keywords = [];
      }

      if (pkg.name.match(/^kronos-interceptor.+/)) {
        if (!pkg.keywords.find(k => k === 'kronos-interceptor')) {
          pkg.keywords.push('kronos-interceptor');
        }
      }
      if (pkg.name.match(/^kronos-step.+/) || pkg.name.match(/^kronos-adapter.+/)) {
        if (!pkg.keywords.find(k => k === 'kronos-step')) {
          pkg.keywords.push('kronos-step');
        }
      }
      if (pkg.name.match(/^kronos-service.+/) && !pkg.name.match(/^kronos-service-manager/)) {
        if (!pkg.keywords.find(k => k === 'kronos-service')) {
          pkg.keywords.push('kronos-service');
        }
      }

      if (pkg.config === undefined) {
        pkg.config = {};
      }
      pkg.config.commitizen = {
        "path": "./node_modules/cz-conventional-changelog"
      };

      return JSON.stringify(pkg, undefined, 2);
    },
    token: token,
    pr: {
      title: 'chore(npm): sync package.json from npm-package-template',
      body: 'engines, version, release scripts for semantic-release, mocha, jsdoc and istanbul'
    }
  }, (err, res) => {
    if (err) {
      console.log(err);
    } else {
      console.log(res.html_url);
    }
  });
}
